#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompanyManagementDataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ABC_Company")]
	public partial class CompanyDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDepartmentMaster(DepartmentMaster instance);
    partial void UpdateDepartmentMaster(DepartmentMaster instance);
    partial void DeleteDepartmentMaster(DepartmentMaster instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeProjectMapper(EmployeeProjectMapper instance);
    partial void UpdateEmployeeProjectMapper(EmployeeProjectMapper instance);
    partial void DeleteEmployeeProjectMapper(EmployeeProjectMapper instance);
    partial void InsertEmployeeTaskMapper(EmployeeTaskMapper instance);
    partial void UpdateEmployeeTaskMapper(EmployeeTaskMapper instance);
    partial void DeleteEmployeeTaskMapper(EmployeeTaskMapper instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectTaskMapper(ProjectTaskMapper instance);
    partial void UpdateProjectTaskMapper(ProjectTaskMapper instance);
    partial void DeleteProjectTaskMapper(ProjectTaskMapper instance);
    partial void InsertStatusMaster(StatusMaster instance);
    partial void UpdateStatusMaster(StatusMaster instance);
    partial void DeleteStatusMaster(StatusMaster instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTaskTechnologyMapper(TaskTechnologyMapper instance);
    partial void UpdateTaskTechnologyMapper(TaskTechnologyMapper instance);
    partial void DeleteTaskTechnologyMapper(TaskTechnologyMapper instance);
    partial void InsertTechnologyMaster(TechnologyMaster instance);
    partial void UpdateTechnologyMaster(TechnologyMaster instance);
    partial void DeleteTechnologyMaster(TechnologyMaster instance);
    partial void InsertTechnologyProjectMapper(TechnologyProjectMapper instance);
    partial void UpdateTechnologyProjectMapper(TechnologyProjectMapper instance);
    partial void DeleteTechnologyProjectMapper(TechnologyProjectMapper instance);
    #endregion
		
		public CompanyDbDataContext() : 
				base(global::CompanyManagementDataLayer.Properties.Settings.Default.ABC_CompanyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentMaster> DepartmentMasters
		{
			get
			{
				return this.GetTable<DepartmentMaster>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeProjectMapper> EmployeeProjectMappers
		{
			get
			{
				return this.GetTable<EmployeeProjectMapper>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeTaskMapper> EmployeeTaskMappers
		{
			get
			{
				return this.GetTable<EmployeeTaskMapper>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTaskMapper> ProjectTaskMappers
		{
			get
			{
				return this.GetTable<ProjectTaskMapper>();
			}
		}
		
		public System.Data.Linq.Table<StatusMaster> StatusMasters
		{
			get
			{
				return this.GetTable<StatusMaster>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TaskTechnologyMapper> TaskTechnologyMappers
		{
			get
			{
				return this.GetTable<TaskTechnologyMapper>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyMaster> TechnologyMasters
		{
			get
			{
				return this.GetTable<TechnologyMaster>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyProjectMapper> TechnologyProjectMappers
		{
			get
			{
				return this.GetTable<TechnologyProjectMapper>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _clientId;
		
		private string _name;
		
		private string _details;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclientIdChanging(int value);
    partial void OnclientIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndetailsChanging(string value);
    partial void OndetailsChanged();
    #endregion
		
		public Client()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int clientId
		{
			get
			{
				return this._clientId;
			}
			set
			{
				if ((this._clientId != value))
				{
					this.OnclientIdChanging(value);
					this.SendPropertyChanging();
					this._clientId = value;
					this.SendPropertyChanged("clientId");
					this.OnclientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_details", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string details
		{
			get
			{
				return this._details;
			}
			set
			{
				if ((this._details != value))
				{
					this.OndetailsChanging(value);
					this.SendPropertyChanging();
					this._details = value;
					this.SendPropertyChanged("details");
					this.OndetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Projects", ThisKey="clientId", OtherKey="clientId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentMaster")]
	public partial class DepartmentMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _departmentMasterId;
		
		private string _name;
		
		private System.Nullable<int> _head;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndepartmentMasterIdChanging(int value);
    partial void OndepartmentMasterIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnheadChanging(System.Nullable<int> value);
    partial void OnheadChanged();
    #endregion
		
		public DepartmentMaster()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentMasterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int departmentMasterId
		{
			get
			{
				return this._departmentMasterId;
			}
			set
			{
				if ((this._departmentMasterId != value))
				{
					this.OndepartmentMasterIdChanging(value);
					this.SendPropertyChanging();
					this._departmentMasterId = value;
					this.SendPropertyChanged("departmentMasterId");
					this.OndepartmentMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_head", DbType="Int")]
		public System.Nullable<int> head
		{
			get
			{
				return this._head;
			}
			set
			{
				if ((this._head != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnheadChanging(value);
					this.SendPropertyChanging();
					this._head = value;
					this.SendPropertyChanged("head");
					this.OnheadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Employee", Storage="_Employees", ThisKey="departmentMasterId", OtherKey="departmentMasterId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Project", Storage="_Projects", ThisKey="departmentMasterId", OtherKey="departmentMasterId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DepartmentMaster", Storage="_Employee", ThisKey="head", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.DepartmentMasters.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.DepartmentMasters.Add(this);
						this._head = value.employeeId;
					}
					else
					{
						this._head = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employeeId;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _email;
		
		private long _phoneNumber;
		
		private System.DateTime _hireDate;
		
		private System.Nullable<int> _departmentMasterId;
		
		private int _salary;
		
		private EntitySet<DepartmentMaster> _DepartmentMasters;
		
		private EntitySet<EmployeeProjectMapper> _EmployeeProjectMappers;
		
		private EntitySet<EmployeeTaskMapper> _EmployeeTaskMappers;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<DepartmentMaster> _DepartmentMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemployeeIdChanging(int value);
    partial void OnemployeeIdChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneNumberChanging(long value);
    partial void OnphoneNumberChanged();
    partial void OnhireDateChanging(System.DateTime value);
    partial void OnhireDateChanged();
    partial void OndepartmentMasterIdChanging(System.Nullable<int> value);
    partial void OndepartmentMasterIdChanged();
    partial void OnsalaryChanging(int value);
    partial void OnsalaryChanged();
    #endregion
		
		public Employee()
		{
			this._DepartmentMasters = new EntitySet<DepartmentMaster>(new Action<DepartmentMaster>(this.attach_DepartmentMasters), new Action<DepartmentMaster>(this.detach_DepartmentMasters));
			this._EmployeeProjectMappers = new EntitySet<EmployeeProjectMapper>(new Action<EmployeeProjectMapper>(this.attach_EmployeeProjectMappers), new Action<EmployeeProjectMapper>(this.detach_EmployeeProjectMappers));
			this._EmployeeTaskMappers = new EntitySet<EmployeeTaskMapper>(new Action<EmployeeTaskMapper>(this.attach_EmployeeTaskMappers), new Action<EmployeeTaskMapper>(this.detach_EmployeeTaskMappers));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._DepartmentMaster = default(EntityRef<DepartmentMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="BigInt NOT NULL")]
		public long phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hireDate", DbType="Date NOT NULL")]
		public System.DateTime hireDate
		{
			get
			{
				return this._hireDate;
			}
			set
			{
				if ((this._hireDate != value))
				{
					this.OnhireDateChanging(value);
					this.SendPropertyChanging();
					this._hireDate = value;
					this.SendPropertyChanged("hireDate");
					this.OnhireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentMasterId", DbType="Int")]
		public System.Nullable<int> departmentMasterId
		{
			get
			{
				return this._departmentMasterId;
			}
			set
			{
				if ((this._departmentMasterId != value))
				{
					if (this._DepartmentMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndepartmentMasterIdChanging(value);
					this.SendPropertyChanging();
					this._departmentMasterId = value;
					this.SendPropertyChanged("departmentMasterId");
					this.OndepartmentMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Int NOT NULL")]
		public int salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DepartmentMaster", Storage="_DepartmentMasters", ThisKey="employeeId", OtherKey="head")]
		public EntitySet<DepartmentMaster> DepartmentMasters
		{
			get
			{
				return this._DepartmentMasters;
			}
			set
			{
				this._DepartmentMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProjectMapper", Storage="_EmployeeProjectMappers", ThisKey="employeeId", OtherKey="employeeId")]
		public EntitySet<EmployeeProjectMapper> EmployeeProjectMappers
		{
			get
			{
				return this._EmployeeProjectMappers;
			}
			set
			{
				this._EmployeeProjectMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTaskMapper", Storage="_EmployeeTaskMappers", ThisKey="employeeId", OtherKey="employeeId")]
		public EntitySet<EmployeeTaskMapper> EmployeeTaskMappers
		{
			get
			{
				return this._EmployeeTaskMappers;
			}
			set
			{
				this._EmployeeTaskMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Project", Storage="_Projects", ThisKey="employeeId", OtherKey="projectManagerId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Employee", Storage="_DepartmentMaster", ThisKey="departmentMasterId", OtherKey="departmentMasterId", IsForeignKey=true)]
		public DepartmentMaster DepartmentMaster
		{
			get
			{
				return this._DepartmentMaster.Entity;
			}
			set
			{
				DepartmentMaster previousValue = this._DepartmentMaster.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentMaster.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._DepartmentMaster.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._departmentMasterId = value.departmentMasterId;
					}
					else
					{
						this._departmentMasterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DepartmentMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_DepartmentMasters(DepartmentMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeProjectMappers(EmployeeProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeProjectMappers(EmployeeProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeTaskMappers(EmployeeTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeTaskMappers(EmployeeTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeProjectMapper")]
	public partial class EmployeeProjectMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employeeProjectMapperId;
		
		private int _employeeId;
		
		private int _projectId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemployeeProjectMapperIdChanging(int value);
    partial void OnemployeeProjectMapperIdChanged();
    partial void OnemployeeIdChanging(int value);
    partial void OnemployeeIdChanged();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    #endregion
		
		public EmployeeProjectMapper()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeProjectMapperId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int employeeProjectMapperId
		{
			get
			{
				return this._employeeProjectMapperId;
			}
			set
			{
				if ((this._employeeProjectMapperId != value))
				{
					this.OnemployeeProjectMapperIdChanging(value);
					this.SendPropertyChanging();
					this._employeeProjectMapperId = value;
					this.SendPropertyChanged("employeeProjectMapperId");
					this.OnemployeeProjectMapperIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int NOT NULL")]
		public int employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProjectMapper", Storage="_Employee", ThisKey="employeeId", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeProjectMappers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjectMappers.Add(this);
						this._employeeId = value.employeeId;
					}
					else
					{
						this._employeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProjectMapper", Storage="_Project", ThisKey="projectId", OtherKey="projectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.EmployeeProjectMappers.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjectMappers.Add(this);
						this._projectId = value.projectId;
					}
					else
					{
						this._projectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeTaskMapper")]
	public partial class EmployeeTaskMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employeeTaskMapperId;
		
		private int _taskId;
		
		private int _employeeId;
		
		private int _statusMasterId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemployeeTaskMapperIdChanging(int value);
    partial void OnemployeeTaskMapperIdChanged();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OnemployeeIdChanging(int value);
    partial void OnemployeeIdChanged();
    partial void OnstatusMasterIdChanging(int value);
    partial void OnstatusMasterIdChanged();
    #endregion
		
		public EmployeeTaskMapper()
		{
			this._Employee = default(EntityRef<Employee>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeTaskMapperId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int employeeTaskMapperId
		{
			get
			{
				return this._employeeTaskMapperId;
			}
			set
			{
				if ((this._employeeTaskMapperId != value))
				{
					this.OnemployeeTaskMapperIdChanging(value);
					this.SendPropertyChanging();
					this._employeeTaskMapperId = value;
					this.SendPropertyChanged("employeeTaskMapperId");
					this.OnemployeeTaskMapperIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", DbType="Int NOT NULL")]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int NOT NULL")]
		public int employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusMasterId", DbType="Int NOT NULL")]
		public int statusMasterId
		{
			get
			{
				return this._statusMasterId;
			}
			set
			{
				if ((this._statusMasterId != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusMasterIdChanging(value);
					this.SendPropertyChanging();
					this._statusMasterId = value;
					this.SendPropertyChanged("statusMasterId");
					this.OnstatusMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTaskMapper", Storage="_Employee", ThisKey="employeeId", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeTaskMappers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeTaskMappers.Add(this);
						this._employeeId = value.employeeId;
					}
					else
					{
						this._employeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_EmployeeTaskMapper", Storage="_StatusMaster", ThisKey="statusMasterId", OtherKey="statusMasterId", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.EmployeeTaskMappers.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.EmployeeTaskMappers.Add(this);
						this._statusMasterId = value.statusMasterId;
					}
					else
					{
						this._statusMasterId = default(int);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_EmployeeTaskMapper", Storage="_Task", ThisKey="taskId", OtherKey="taskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.EmployeeTaskMappers.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.EmployeeTaskMappers.Add(this);
						this._taskId = value.taskId;
					}
					else
					{
						this._taskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _projectId;
		
		private string _name;
		
		private int _departmentMasterId;
		
		private int _statusMasterId;
		
		private int _clientId;
		
		private int _projectManagerId;
		
		private EntitySet<EmployeeProjectMapper> _EmployeeProjectMappers;
		
		private EntitySet<ProjectTaskMapper> _ProjectTaskMappers;
		
		private EntitySet<TechnologyProjectMapper> _TechnologyProjectMappers;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<DepartmentMaster> _DepartmentMaster;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndepartmentMasterIdChanging(int value);
    partial void OndepartmentMasterIdChanged();
    partial void OnstatusMasterIdChanging(int value);
    partial void OnstatusMasterIdChanged();
    partial void OnclientIdChanging(int value);
    partial void OnclientIdChanged();
    partial void OnprojectManagerIdChanging(int value);
    partial void OnprojectManagerIdChanged();
    #endregion
		
		public Project()
		{
			this._EmployeeProjectMappers = new EntitySet<EmployeeProjectMapper>(new Action<EmployeeProjectMapper>(this.attach_EmployeeProjectMappers), new Action<EmployeeProjectMapper>(this.detach_EmployeeProjectMappers));
			this._ProjectTaskMappers = new EntitySet<ProjectTaskMapper>(new Action<ProjectTaskMapper>(this.attach_ProjectTaskMappers), new Action<ProjectTaskMapper>(this.detach_ProjectTaskMappers));
			this._TechnologyProjectMappers = new EntitySet<TechnologyProjectMapper>(new Action<TechnologyProjectMapper>(this.attach_TechnologyProjectMappers), new Action<TechnologyProjectMapper>(this.detach_TechnologyProjectMappers));
			this._Client = default(EntityRef<Client>);
			this._DepartmentMaster = default(EntityRef<DepartmentMaster>);
			this._Employee = default(EntityRef<Employee>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentMasterId", DbType="Int NOT NULL")]
		public int departmentMasterId
		{
			get
			{
				return this._departmentMasterId;
			}
			set
			{
				if ((this._departmentMasterId != value))
				{
					if (this._DepartmentMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndepartmentMasterIdChanging(value);
					this.SendPropertyChanging();
					this._departmentMasterId = value;
					this.SendPropertyChanged("departmentMasterId");
					this.OndepartmentMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusMasterId", DbType="Int NOT NULL")]
		public int statusMasterId
		{
			get
			{
				return this._statusMasterId;
			}
			set
			{
				if ((this._statusMasterId != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusMasterIdChanging(value);
					this.SendPropertyChanging();
					this._statusMasterId = value;
					this.SendPropertyChanged("statusMasterId");
					this.OnstatusMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clientId", DbType="Int NOT NULL")]
		public int clientId
		{
			get
			{
				return this._clientId;
			}
			set
			{
				if ((this._clientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclientIdChanging(value);
					this.SendPropertyChanging();
					this._clientId = value;
					this.SendPropertyChanged("clientId");
					this.OnclientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectManagerId", DbType="Int NOT NULL")]
		public int projectManagerId
		{
			get
			{
				return this._projectManagerId;
			}
			set
			{
				if ((this._projectManagerId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectManagerIdChanging(value);
					this.SendPropertyChanging();
					this._projectManagerId = value;
					this.SendPropertyChanged("projectManagerId");
					this.OnprojectManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProjectMapper", Storage="_EmployeeProjectMappers", ThisKey="projectId", OtherKey="projectId")]
		public EntitySet<EmployeeProjectMapper> EmployeeProjectMappers
		{
			get
			{
				return this._EmployeeProjectMappers;
			}
			set
			{
				this._EmployeeProjectMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTaskMapper", Storage="_ProjectTaskMappers", ThisKey="projectId", OtherKey="projectId")]
		public EntitySet<ProjectTaskMapper> ProjectTaskMappers
		{
			get
			{
				return this._ProjectTaskMappers;
			}
			set
			{
				this._ProjectTaskMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TechnologyProjectMapper", Storage="_TechnologyProjectMappers", ThisKey="projectId", OtherKey="projectId")]
		public EntitySet<TechnologyProjectMapper> TechnologyProjectMappers
		{
			get
			{
				return this._TechnologyProjectMappers;
			}
			set
			{
				this._TechnologyProjectMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Client", ThisKey="clientId", OtherKey="clientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._clientId = value.clientId;
					}
					else
					{
						this._clientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DepartmentMaster_Project", Storage="_DepartmentMaster", ThisKey="departmentMasterId", OtherKey="departmentMasterId", IsForeignKey=true)]
		public DepartmentMaster DepartmentMaster
		{
			get
			{
				return this._DepartmentMaster.Entity;
			}
			set
			{
				DepartmentMaster previousValue = this._DepartmentMaster.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentMaster.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._DepartmentMaster.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._departmentMasterId = value.departmentMasterId;
					}
					else
					{
						this._departmentMasterId = default(int);
					}
					this.SendPropertyChanged("DepartmentMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Project", Storage="_Employee", ThisKey="projectManagerId", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._projectManagerId = value.employeeId;
					}
					else
					{
						this._projectManagerId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_StatusMaster", ThisKey="statusMasterId", OtherKey="statusMasterId", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._statusMasterId = value.statusMasterId;
					}
					else
					{
						this._statusMasterId = default(int);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjectMappers(EmployeeProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_EmployeeProjectMappers(EmployeeProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectTaskMappers(ProjectTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTaskMappers(ProjectTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TechnologyProjectMappers(TechnologyProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TechnologyProjectMappers(TechnologyProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTaskMapper")]
	public partial class ProjectTaskMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _projectTaskMapperId;
		
		private int _taskId;
		
		private int _projectId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprojectTaskMapperIdChanging(int value);
    partial void OnprojectTaskMapperIdChanged();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    #endregion
		
		public ProjectTaskMapper()
		{
			this._Project = default(EntityRef<Project>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectTaskMapperId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int projectTaskMapperId
		{
			get
			{
				return this._projectTaskMapperId;
			}
			set
			{
				if ((this._projectTaskMapperId != value))
				{
					this.OnprojectTaskMapperIdChanging(value);
					this.SendPropertyChanging();
					this._projectTaskMapperId = value;
					this.SendPropertyChanged("projectTaskMapperId");
					this.OnprojectTaskMapperIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", DbType="Int NOT NULL")]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTaskMapper", Storage="_Project", ThisKey="projectId", OtherKey="projectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTaskMappers.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTaskMappers.Add(this);
						this._projectId = value.projectId;
					}
					else
					{
						this._projectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTaskMapper", Storage="_Task", ThisKey="taskId", OtherKey="taskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.ProjectTaskMappers.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.ProjectTaskMappers.Add(this);
						this._taskId = value.taskId;
					}
					else
					{
						this._taskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusMaster")]
	public partial class StatusMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _statusMasterId;
		
		private string _name;
		
		private EntitySet<EmployeeTaskMapper> _EmployeeTaskMappers;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstatusMasterIdChanging(int value);
    partial void OnstatusMasterIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public StatusMaster()
		{
			this._EmployeeTaskMappers = new EntitySet<EmployeeTaskMapper>(new Action<EmployeeTaskMapper>(this.attach_EmployeeTaskMappers), new Action<EmployeeTaskMapper>(this.detach_EmployeeTaskMappers));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusMasterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int statusMasterId
		{
			get
			{
				return this._statusMasterId;
			}
			set
			{
				if ((this._statusMasterId != value))
				{
					this.OnstatusMasterIdChanging(value);
					this.SendPropertyChanging();
					this._statusMasterId = value;
					this.SendPropertyChanged("statusMasterId");
					this.OnstatusMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_EmployeeTaskMapper", Storage="_EmployeeTaskMappers", ThisKey="statusMasterId", OtherKey="statusMasterId")]
		public EntitySet<EmployeeTaskMapper> EmployeeTaskMappers
		{
			get
			{
				return this._EmployeeTaskMappers;
			}
			set
			{
				this._EmployeeTaskMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_Projects", ThisKey="statusMasterId", OtherKey="statusMasterId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Task", Storage="_Tasks", ThisKey="statusMasterId", OtherKey="statusId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeTaskMappers(EmployeeTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_EmployeeTaskMappers(EmployeeTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _taskId;
		
		private string _name;
		
		private int _statusId;
		
		private System.Nullable<System.DateTime> _updateDate;
		
		private EntitySet<EmployeeTaskMapper> _EmployeeTaskMappers;
		
		private EntitySet<ProjectTaskMapper> _ProjectTaskMappers;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusIdChanging(int value);
    partial void OnstatusIdChanged();
    partial void OnupdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnupdateDateChanged();
    #endregion
		
		public Task()
		{
			this._EmployeeTaskMappers = new EntitySet<EmployeeTaskMapper>(new Action<EmployeeTaskMapper>(this.attach_EmployeeTaskMappers), new Action<EmployeeTaskMapper>(this.detach_EmployeeTaskMappers));
			this._ProjectTaskMappers = new EntitySet<ProjectTaskMapper>(new Action<ProjectTaskMapper>(this.attach_ProjectTaskMappers), new Action<ProjectTaskMapper>(this.detach_ProjectTaskMappers));
			this._StatusMaster = default(EntityRef<StatusMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusId", DbType="Int NOT NULL")]
		public int statusId
		{
			get
			{
				return this._statusId;
			}
			set
			{
				if ((this._statusId != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIdChanging(value);
					this.SendPropertyChanging();
					this._statusId = value;
					this.SendPropertyChanged("statusId");
					this.OnstatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updateDate", DbType="Date")]
		public System.Nullable<System.DateTime> updateDate
		{
			get
			{
				return this._updateDate;
			}
			set
			{
				if ((this._updateDate != value))
				{
					this.OnupdateDateChanging(value);
					this.SendPropertyChanging();
					this._updateDate = value;
					this.SendPropertyChanged("updateDate");
					this.OnupdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_EmployeeTaskMapper", Storage="_EmployeeTaskMappers", ThisKey="taskId", OtherKey="taskId")]
		public EntitySet<EmployeeTaskMapper> EmployeeTaskMappers
		{
			get
			{
				return this._EmployeeTaskMappers;
			}
			set
			{
				this._EmployeeTaskMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTaskMapper", Storage="_ProjectTaskMappers", ThisKey="taskId", OtherKey="taskId")]
		public EntitySet<ProjectTaskMapper> ProjectTaskMappers
		{
			get
			{
				return this._ProjectTaskMappers;
			}
			set
			{
				this._ProjectTaskMappers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Task", Storage="_StatusMaster", ThisKey="statusId", OtherKey="statusMasterId", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._statusId = value.statusMasterId;
					}
					else
					{
						this._statusId = default(int);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeTaskMappers(EmployeeTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_EmployeeTaskMappers(EmployeeTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_ProjectTaskMappers(ProjectTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_ProjectTaskMappers(ProjectTaskMapper entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskTechnologyMapper")]
	public partial class TaskTechnologyMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _taskTechnologyMapperId;
		
		private int _taskId;
		
		private int _technologyMasterId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntaskTechnologyMapperIdChanging(int value);
    partial void OntaskTechnologyMapperIdChanged();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OntechnologyMasterIdChanging(int value);
    partial void OntechnologyMasterIdChanged();
    #endregion
		
		public TaskTechnologyMapper()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskTechnologyMapperId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int taskTechnologyMapperId
		{
			get
			{
				return this._taskTechnologyMapperId;
			}
			set
			{
				if ((this._taskTechnologyMapperId != value))
				{
					this.OntaskTechnologyMapperIdChanging(value);
					this.SendPropertyChanging();
					this._taskTechnologyMapperId = value;
					this.SendPropertyChanged("taskTechnologyMapperId");
					this.OntaskTechnologyMapperIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", DbType="Int NOT NULL")]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_technologyMasterId", DbType="Int NOT NULL")]
		public int technologyMasterId
		{
			get
			{
				return this._technologyMasterId;
			}
			set
			{
				if ((this._technologyMasterId != value))
				{
					this.OntechnologyMasterIdChanging(value);
					this.SendPropertyChanging();
					this._technologyMasterId = value;
					this.SendPropertyChanged("technologyMasterId");
					this.OntechnologyMasterIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyMaster")]
	public partial class TechnologyMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _technologyMasterId;
		
		private string _name;
		
		private double _version;
		
		private EntitySet<TechnologyProjectMapper> _TechnologyProjectMappers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntechnologyMasterIdChanging(int value);
    partial void OntechnologyMasterIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnversionChanging(double value);
    partial void OnversionChanged();
    #endregion
		
		public TechnologyMaster()
		{
			this._TechnologyProjectMappers = new EntitySet<TechnologyProjectMapper>(new Action<TechnologyProjectMapper>(this.attach_TechnologyProjectMappers), new Action<TechnologyProjectMapper>(this.detach_TechnologyProjectMappers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_technologyMasterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int technologyMasterId
		{
			get
			{
				return this._technologyMasterId;
			}
			set
			{
				if ((this._technologyMasterId != value))
				{
					this.OntechnologyMasterIdChanging(value);
					this.SendPropertyChanging();
					this._technologyMasterId = value;
					this.SendPropertyChanged("technologyMasterId");
					this.OntechnologyMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="Float NOT NULL")]
		public double version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechnologyProjectMapper", Storage="_TechnologyProjectMappers", ThisKey="technologyMasterId", OtherKey="technologyId")]
		public EntitySet<TechnologyProjectMapper> TechnologyProjectMappers
		{
			get
			{
				return this._TechnologyProjectMappers;
			}
			set
			{
				this._TechnologyProjectMappers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TechnologyProjectMappers(TechnologyProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = this;
		}
		
		private void detach_TechnologyProjectMappers(TechnologyProjectMapper entity)
		{
			this.SendPropertyChanging();
			entity.TechnologyMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyProjectMapper")]
	public partial class TechnologyProjectMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _technologyProjectMapperId;
		
		private int _technologyId;
		
		private int _projectId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<TechnologyMaster> _TechnologyMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntechnologyProjectMapperIdChanging(int value);
    partial void OntechnologyProjectMapperIdChanged();
    partial void OntechnologyIdChanging(int value);
    partial void OntechnologyIdChanged();
    partial void OnprojectIdChanging(int value);
    partial void OnprojectIdChanged();
    #endregion
		
		public TechnologyProjectMapper()
		{
			this._Project = default(EntityRef<Project>);
			this._TechnologyMaster = default(EntityRef<TechnologyMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_technologyProjectMapperId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int technologyProjectMapperId
		{
			get
			{
				return this._technologyProjectMapperId;
			}
			set
			{
				if ((this._technologyProjectMapperId != value))
				{
					this.OntechnologyProjectMapperIdChanging(value);
					this.SendPropertyChanging();
					this._technologyProjectMapperId = value;
					this.SendPropertyChanged("technologyProjectMapperId");
					this.OntechnologyProjectMapperIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_technologyId", DbType="Int NOT NULL")]
		public int technologyId
		{
			get
			{
				return this._technologyId;
			}
			set
			{
				if ((this._technologyId != value))
				{
					if (this._TechnologyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntechnologyIdChanging(value);
					this.SendPropertyChanging();
					this._technologyId = value;
					this.SendPropertyChanged("technologyId");
					this.OntechnologyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectId", DbType="Int NOT NULL")]
		public int projectId
		{
			get
			{
				return this._projectId;
			}
			set
			{
				if ((this._projectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectIdChanging(value);
					this.SendPropertyChanging();
					this._projectId = value;
					this.SendPropertyChanged("projectId");
					this.OnprojectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TechnologyProjectMapper", Storage="_Project", ThisKey="projectId", OtherKey="projectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TechnologyProjectMappers.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TechnologyProjectMappers.Add(this);
						this._projectId = value.projectId;
					}
					else
					{
						this._projectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TechnologyMaster_TechnologyProjectMapper", Storage="_TechnologyMaster", ThisKey="technologyId", OtherKey="technologyMasterId", IsForeignKey=true)]
		public TechnologyMaster TechnologyMaster
		{
			get
			{
				return this._TechnologyMaster.Entity;
			}
			set
			{
				TechnologyMaster previousValue = this._TechnologyMaster.Entity;
				if (((previousValue != value) 
							|| (this._TechnologyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TechnologyMaster.Entity = null;
						previousValue.TechnologyProjectMappers.Remove(this);
					}
					this._TechnologyMaster.Entity = value;
					if ((value != null))
					{
						value.TechnologyProjectMappers.Add(this);
						this._technologyId = value.technologyMasterId;
					}
					else
					{
						this._technologyId = default(int);
					}
					this.SendPropertyChanged("TechnologyMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
